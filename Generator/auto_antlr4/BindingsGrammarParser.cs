//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\oleg\projects\Dx12Setup\ReflectionGenerator\ShadersReflectionToCode\SRCPP\Generator\BindingsGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class BindingsGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, FloatNumber=12, IntNumber=13, Id=14, WhiteSpace=15;
	public const int
		RULE_text = 0, RULE_statement = 1, RULE_binding = 2, RULE_srvId = 3, RULE_texId = 4, 
		RULE_uavId = 5, RULE_enum = 6, RULE_enumElements = 7, RULE_enumElement = 8, 
		RULE_enumValue = 9, RULE_struct = 10, RULE_fields = 11, RULE_field = 12, 
		RULE_type = 13;
	public static readonly string[] ruleNames = {
		"text", "statement", "binding", "srvId", "texId", "uavId", "enum", "enumElements", 
		"enumElement", "enumValue", "struct", "fields", "field", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'SRV<'", "'>'", "'TEX<'", "'UAV<'", "'enum'", "'{'", "'}'", 
		"','", "'='", "'struct'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"FloatNumber", "IntNumber", "Id", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BindingsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BindingsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BindingsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BindingsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 0, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__10))) != 0)) {
				{
				{
				State = 28;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__3:
			case T__4:
				{
				State = 34;
				binding();
				}
				break;
			case T__10:
				{
				State = 35;
				@struct();
				}
				break;
			case T__5:
				{
				State = 36;
				@enum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SrvIdContext srvId() {
			return GetRuleContext<SrvIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UavIdContext uavId() {
			return GetRuleContext<UavIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TexIdContext texId() {
			return GetRuleContext<TexIdContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 4, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 39;
				srvId();
				}
				break;
			case T__4:
				{
				State = 40;
				uavId();
				}
				break;
			case T__3:
				{
				State = 41;
				texId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 44;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrvIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		public SrvIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srvId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSrvId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SrvIdContext srvId() {
		SrvIdContext _localctx = new SrvIdContext(Context, State);
		EnterRule(_localctx, 6, RULE_srvId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(T__1);
			State = 47;
			type();
			State = 48;
			Match(T__2);
			State = 49;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TexIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		public TexIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_texId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTexId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TexIdContext texId() {
		TexIdContext _localctx = new TexIdContext(Context, State);
		EnterRule(_localctx, 8, RULE_texId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__3);
			State = 52;
			type();
			State = 53;
			Match(T__2);
			State = 54;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UavIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		public UavIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uavId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUavId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UavIdContext uavId() {
		UavIdContext _localctx = new UavIdContext(Context, State);
		EnterRule(_localctx, 10, RULE_uavId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(T__4);
			State = 57;
			type();
			State = 58;
			Match(T__2);
			State = 59;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementsContext enumElements() {
			return GetRuleContext<EnumElementsContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 12, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__5);
			State = 62;
			type();
			State = 63;
			Match(T__6);
			State = 64;
			enumElements();
			State = 65;
			Match(T__7);
			State = 66;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext[] enumElement() {
			return GetRuleContexts<EnumElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext enumElement(int i) {
			return GetRuleContext<EnumElementContext>(i);
		}
		public EnumElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementsContext enumElements() {
		EnumElementsContext _localctx = new EnumElementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 68;
				enumElement();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 74;
				Match(Id);
				State = 75;
				Match(T__8);
				}
				break;
			case 2:
				{
				State = 76;
				Match(Id);
				State = 77;
				Match(T__9);
				State = 78;
				enumValue();
				State = 79;
				Match(T__8);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumber() { return GetToken(BindingsGrammarParser.IntNumber, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(IntNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__10);
			State = 86;
			type();
			State = 87;
			Match(T__6);
			State = 88;
			fields();
			State = 89;
			Match(T__7);
			State = 90;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 22, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 92;
				field();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			type();
			State = 99;
			Match(Id);
			State = 100;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(BindingsGrammarParser.Id, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBindingsGrammarVisitor<TResult> typedVisitor = visitor as IBindingsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'k', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '(', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\a', '\t', 'H', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'K', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'T', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\a', '\r', 
		'`', '\n', '\r', '\f', '\r', '\xE', '\r', '\x63', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', 
		'\x2', '\x2', '\x64', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\f', ':', '\x3', '\x2', '\x2', '\x2', '\xE', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'I', '\x3', '\x2', '\x2', '\x2', '\x12', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x18', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x64', '\x3', '\x2', '\x2', '\x2', '\x1C', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x3', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '(', '\x5', '\x6', '\x4', '\x2', '%', '(', '\x5', '\x16', 
		'\f', '\x2', '&', '(', '\x5', '\xE', '\b', '\x2', '\'', '$', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x5', '\x3', '\x2', '\x2', '\x2', ')', '-', 
		'\x5', '\b', '\x5', '\x2', '*', '-', '\x5', '\f', '\a', '\x2', '+', '-', 
		'\x5', '\n', '\x6', '\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', ',', 
		'*', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x3', '\x2', '\x2', 
		'/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x4', '\x2', 
		'\x2', '\x31', '\x32', '\x5', '\x1C', '\xF', '\x2', '\x32', '\x33', '\a', 
		'\x5', '\x2', '\x2', '\x33', '\x34', '\a', '\x10', '\x2', '\x2', '\x34', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x6', '\x2', 
		'\x2', '\x36', '\x37', '\x5', '\x1C', '\xF', '\x2', '\x37', '\x38', '\a', 
		'\x5', '\x2', '\x2', '\x38', '\x39', '\a', '\x10', '\x2', '\x2', '\x39', 
		'\v', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\a', '\x2', '\x2', 
		';', '<', '\x5', '\x1C', '\xF', '\x2', '<', '=', '\a', '\x5', '\x2', '\x2', 
		'=', '>', '\a', '\x10', '\x2', '\x2', '>', '\r', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\a', '\b', '\x2', '\x2', '@', '\x41', '\x5', '\x1C', 
		'\xF', '\x2', '\x41', '\x42', '\a', '\t', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\x10', '\t', '\x2', '\x43', '\x44', '\a', '\n', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x3', '\x2', '\x2', '\x45', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'H', '\x5', '\x12', '\n', '\x2', 'G', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 
		'M', '\a', '\x10', '\x2', '\x2', 'M', 'T', '\a', '\v', '\x2', '\x2', 'N', 
		'O', '\a', '\x10', '\x2', '\x2', 'O', 'P', '\a', '\f', '\x2', '\x2', 'P', 
		'Q', '\x5', '\x14', '\v', '\x2', 'Q', 'R', '\a', '\v', '\x2', '\x2', 'R', 
		'T', '\x3', '\x2', '\x2', '\x2', 'S', 'L', '\x3', '\x2', '\x2', '\x2', 
		'S', 'N', '\x3', '\x2', '\x2', '\x2', 'T', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\xF', '\x2', '\x2', 'V', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\a', '\r', '\x2', '\x2', 'X', 'Y', '\x5', '\x1C', 
		'\xF', '\x2', 'Y', 'Z', '\a', '\t', '\x2', '\x2', 'Z', '[', '\x5', '\x18', 
		'\r', '\x2', '[', '\\', '\a', '\n', '\x2', '\x2', '\\', ']', '\a', '\x3', 
		'\x2', '\x2', ']', '\x17', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', 
		'\x1A', '\xE', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', 
		'\x1C', '\xF', '\x2', '\x65', '\x66', '\a', '\x10', '\x2', '\x2', '\x66', 
		'g', '\a', '\x3', '\x2', '\x2', 'g', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\a', '\x10', '\x2', '\x2', 'i', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\b', '!', '\'', ',', 'I', 'S', '\x61',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
